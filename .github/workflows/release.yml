name: Release

on:
  push:
    branches: [ release ]
  pull_request:
    branches: [ release ]

env:
  CARGO_TERM_COLOR: always

jobs:
  release-linux-amd64:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: 'recursive'
    - name: Install rust
      uses: hecrj/setup-rust-action@v1
      with:
        rust-version: 1.46.0
    # cache cargo
    - uses: actions/cache@v2
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
    - name: GTK development librarys
      run: sudo apt-get update -y && sudo apt-get install -y libgtk-3-dev
    - name: build
      run: cargo build --release --all-features 
    - name: rename output
      run: mv target/release/tex-match ./tex-match.linux.amd64
    - uses: actions/upload-artifact@v2.2.0
      with:
        name: tex-match.linux.amd64
        path: ./tex-match.linux.amd64

  release-windows:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: 'recursive'
    - name: Install rust
      uses: hecrj/setup-rust-action@v1
      with:
        rust-version: 1.46.0
    # cache cargo
    - uses: actions/cache@v2
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
    ################# Dependencies #################
    - name: Windows dependencies (msys)
      if: runner.os == 'windows'
      run: C:\msys64\usr\bin\bash.exe -lc "pacman -Syy --noconfirm mingw-w64-x86_64-pkg-config mingw-w64-x86_64-adwaita-icon-theme"
    - name: Windows dependencies (add msys to path)
      if: runner.os == 'windows'
      run: echo "C:\msys64\mingw64\bin" >> $GITHUB_PATH
    - name: Windows dependencies (cache gvsbuild)
      if: runner.os == 'windows'
      uses: actions/cache@v2
      id: cache
      with:
        path: release\**
        key: ${{ runner.os }}-gvsbuild--${{ hashFiles('submodules/gvsbuild/**') }}
    - name: Windows dependencies (move gvsbuild files)
      if: runner.os == 'windows' && steps.cache.outputs.cache-hit == 'true'
      run: xcopy /e /i release C:\gtk-build\gtk\x64\release
      shell: cmd
    - name: Windows dependencies (copy gvsbuild)
      if: runner.os == 'windows' && steps.cache.outputs.cache-hit != 'true'
      run: xcopy /e /i submodules\gvsbuild C:\gtk-build\github\gvsbuild
    - name: Windows dependencies (remove git)
      if: runner.os == 'windows'
      run: rmdir "C:\Program Files\Git\usr\bin" /s /q # remove git's bin, there are conflicting cygwin dll's
      shell: cmd
    - name: Windows dependencies (gtk)
      if: runner.os == 'windows' && steps.cache.outputs.cache-hit != 'true'
      run: python .\build.py build -p=x64 --vs-ver=16 --msys-dir=C:\msys64 -k --enable-gi --py-wheel --py-egg gtk3 gdk-pixbuf gtksourceview3 librsvg hicolor-icon-theme
      working-directory: C:\gtk-build\github\gvsbuild
    - name: Windows dependencies (add gvsbuild bin directory to path)
      if: runner.os == 'windows'
      run: echo "C:\gtk-build\gtk\x64\release\bin" >> $GITHUB_PATH
    ################# Dependencies #################
    # install cargo wix
    - name: install cargo-wix
      run: cargo install cargo-wix
    # build installer
    - name: build
      run: cargo wix -v --nocapture -o tex-match.windows.msi
    # upload
    - uses: actions/upload-artifact@v2.2.0
      with:
        name: tex-match.windows.msi
        path: ./tex-match.windows.msi

  release-macosx:
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: 'recursive'
    - name: Install rust
      uses: hecrj/setup-rust-action@v1
      with:
        rust-version: 1.46.0
    # cache cargo
    - uses: actions/cache@v2
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
    - name: GTK development librarys
      run: brew install gtk+3 pkg-config
    - name: build
      run: cargo build --release --all-features 
    - name: rename output
      run: mv target/release/tex-match ./tex-match.macos
    - uses: actions/upload-artifact@v2.2.0
      with:
        name: tex-match.macos
        path: ./tex-match.macos

  release-snap:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: 'recursive'
    - name: Install rust
      uses: hecrj/setup-rust-action@v1
      with:
        rust-version: 1.46.0
    - uses: snapcore/action-build@v1
      id: snapcraft
    - uses: snapcore/action-publish@v1
      if: github.event_name != 'pull_request'
      with:
        store_login: ${{ secrets.snapcraft_token }}
        snap: ${{ steps.snapcraft.outputs.snap }}
        release: stable
    - name: rename output
      run: mv ${{ steps.snapcraft.outputs.snap }} ./tex-match.snap
    - uses: actions/upload-artifact@v2.2.0
      with:
        name: tex-match.snap
        path: ./tex-match.snap

  release-flatpak:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: 'recursive'
    - name: Flatpak
      run: sudo add-apt-repository -y ppa:alexlarsson/flatpak && sudo apt-get update -y && sudo apt-get install -y flatpak
    - name: Flatpak builder deps
      run: sudo apt-get update && sudo apt-get install -y elfutils libcap-dev libsoup-gnome2.4-dev libostree-dev libjson-glib-dev libcurl4-gnutls-dev libelf-dev libdwarf-dev xsltproc
    - name: Flatpak remote
      run: sudo flatpak remote-add --if-not-exists flathub https://dl.flathub.org/repo/flathub.flatpakrepo
    - name: Flatpak SDK's
      run: sudo flatpak install -y flathub org.freedesktop.Platform//20.08 org.freedesktop.Sdk//20.08 org.freedesktop.Sdk.Extension.rust-stable//20.08
    - name: Flatpak builder
      run: wget https://github.com/flatpak/flatpak-builder/releases/download/1.0.10/flatpak-builder-1.0.10.tar.xz && tar -xvf flatpak-builder-1.0.10.tar.xz && cd flatpak-builder-1.0.10 && ./configure --disable-documentation && make && sudo make install
    - name: Python TOML
      run: sudo apt-get install python3-toml 
    - name: Generate sources
      run: sudo bash flatpak/gen-sources.sh
    - name: Flatpak
      run: sudo flatpak-builder --repo=repo build-dir flatpak/uk.co.mrbenshef.TeX-Match.json
    - name: Flatpak build bundle
      run: flatpak build-bundle ./repo tex-match.flatpak uk.co.mrbenshef.TeX-Match
    - uses: actions/upload-artifact@v2.2.0
      with:
        name: tex-match.flatpak
        path: ./tex-match.flatpak

  release-cargo:
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: 'recursive'
    - name: Install rust
      uses: hecrj/setup-rust-action@v1
      with:
        rust-version: 1.46.0
    # cache cargo
    - uses: actions/cache@v2
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
    - name: GTK development librarys
      run: sudo apt-get update -y && sudo apt-get install -y libgtk-3-dev
    - name: cargo login
      run: cargo login ${{ secrets.CRATES }}
    - name: cargo publish
      run: cargo publish

  release:
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request' # don't do a release for pull requests into release, just upload artifacts to test
    needs: [release-linux-amd64, release-macosx, release-windows, release-snap, release-flatpak]
    steps:
    # download artifacts
    - uses: actions/download-artifact@v2
      with:
        name: tex-match.linux.amd64
        path: ./
    - uses: actions/download-artifact@v2
      with:
        name: tex-match.macos
        path: ./
    - uses: actions/download-artifact@v2
      with:
        name: tex-match.snap
        path: ./
    - uses: actions/download-artifact@v2
      with:
        name: tex-match.flatpak
        path: ./
    - uses: actions/download-artifact@v2
      with:
        name: tex-match.windows.msi
        path: ./
    # create a release
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: true
        prerelease: false
    - name: Debug LS
      run: ls -al
    # upload
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ./tex-match.linux.amd64
        asset_name: tex-match.linux.amd64
        asset_content_type: application/octet-stream
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ./tex-match.macos
        asset_name: tex-match.macos
        asset_content_type: application/octet-stream
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ./tex-match.snap
        asset_name: tex-match.snap
        asset_content_type: application/octet-stream
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ./tex-match.flatpak
        asset_name: tex-match.flatpak
        asset_content_type: application/octet-stream
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ./tex-match.windows.msi
        asset_name: tex-match.windows.msi
        asset_content_type: application/octet-stream